import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    public static int minimumNumber(int n, String password) {
        String numbers = "0123456789";
        String lower_case = "abcdefghijklmnopqrstuvwxyz";
        String upper_case = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        String special_characters = "!@#$%^&*()-+";
        
        boolean hasNumber, hasLowerCase, hasUpperCase, hasSpecialCharacter;
        hasNumber = hasLowerCase = hasUpperCase = hasSpecialCharacter = false;
        
        int count = 0;
        
        for(int i = 0; i < n; i++)
        {
            if(password.charAt(i) >= 48 && password.charAt(i) <= 59)
            {
                hasNumber = true;
            }
            else if(password.charAt(i) >= 97 && password.charAt(i) <= 122)
            {
                hasLowerCase = true;
            }
            else if(password.charAt(i) >= 65 && password.charAt(i) <= 90)
            {
                hasUpperCase = true;
            }
            for(int j = 0; j < special_characters.length(); j++)
            {
                if(password.charAt(i) == special_characters.charAt(j))
                {
                    hasSpecialCharacter = true;
                    break;
                }
            }
        }
        
        if(!hasNumber)
        {
            count++;
        }
        if(!hasLowerCase)
        {
            count++;
        }
        if(!hasUpperCase)
        {
            count++;
        }
        if(!hasSpecialCharacter)
        {
            count++;
        }
        
        if((n + count) < 6)
        {
            count = 6 - n;
        }
        return count;
    }

}

public class StrongPassword {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = Integer.parseInt(bufferedReader.readLine().trim());

        String password = bufferedReader.readLine();

        int answer = Result.minimumNumber(n, password);

        bufferedWriter.write(String.valueOf(answer));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
